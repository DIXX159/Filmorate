package ru.yandex.practicum.filmorate.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import ru.yandex.practicum.filmorate.dao.DirectorDao;
import ru.yandex.practicum.filmorate.exception.NotFoundException;
import ru.yandex.practicum.filmorate.model.Director;

import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class DirectorService {
    @Qualifier("directorDaoImpl")
    private final DirectorDao directorDao;

    public Director addDirector(Director director) {
        Director createdDirector = directorDao.createDirector(director);
        Long autoGeneratedId = createdDirector.getId();
        log.debug("Режиссер сохранен в таблице directors, присвоен id={}", autoGeneratedId);
        director.setId(autoGeneratedId);
        return directorDao.getDirectorById(autoGeneratedId);
    }

    public Director getDirectorById(Long id) {
        Director directorFromDatabase = directorDao.getDirectorById(id);
        log.debug("Из таблицы directors считан считан режиссер с id={}: {}", id, directorFromDatabase);
        return directorFromDatabase;
    }

    public List<Director> getAllDirectors() {
        List<Director> allDirectors = directorDao.getAllDirectors();
        log.debug("Из таблицы directors считаны все режиссеры: {}", allDirectors);
        return allDirectors;
    }

    public Director updateDirector(Director director) {
        Long directorId = director.getId();
        Director updatedDirector = directorDao.updateDirector(director);
        log.debug("Режиссер с id={} обновлен в таблице directors", directorId);
        return updatedDirector;
    }

    public void deleteDirector(Long id) {
        if (directorDao.deleteDirector(id) > 0) {
            log.debug("Режиссер с id={} удален из таблицы directors", id);
        } else {
            String errorMessage = String.format("В базе данных отсутствует режиссер с id=%d", id);
            throw new NotFoundException(errorMessage);
        }
    }
}
